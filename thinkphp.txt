画程序的组织关系:
	url index.php?g=***&c=***&a=***
	|
	index.php  Controller
	|            |
	XxxController/xxx
	|
-------------------
|  Model           V
|  |
XxxModel

ThinkPHP 3-4天
基于MVC软件设计模式,编写的php框架
框架:一个物体的主体部分.
程序框架:把项目中可能用的核心代码,进行编写.

如何学习ThinkPHP?
url地址规则
index.php编写
C层的编写规则
M层的编写规则
V层的编写规则
公共类的使用

下载:
thinkphp.cn
安装:
新建一个入口文件
index.php
define('APP_PATH','./Application/');//指定项目目录 
define('APP_DEBUG',true);//开启调试模式
require './ThinkPHP/ThinkPHP.php';//加载thinkphp的入口文件
application
	Common --- 公共模块 封装一个数据模型类
	Home --- 模块目录 前台对应的控制器 数据模型类 ....
		Common 
			function.php --- 自定义函数
		Controller
			控制器
		Conf
			配置文件
		Model
			数据模型类
		View
			模板
	Admin
		
	User
	Runtime --- 缓存文件 临时文件

url地址规则:
***/index.php?m=模块&c=控制器&a=方法   //普通模式
***/index.php/模块/控制器/方法 //pathinfo模式
***/index.php?s=模块/控制器/方法 //混合模式

控制器的编写:
	命名 XxxController.class.php
	类名和类文件名一致
	必须继承Controller ???
	使用了命名空间
	namespace 模块名\Controller;
	use Think\Controller;
Controller给我们提供什么方法:
给模板传值
$this->assign(模板标签名,被传递的值)
显示模板
$this->display([模板的路径]);
说明:display()没有参数找控制器方法对应的默认模板.
View/控制器名/方法名.html
路径的写法:./application/Home/View/控制器/模板

控制器名/方法 ---- 对应的默认模板

News/listern ---- View/News/listern.html
News/a ---- View/News/a.html

练习:呈现文章列表页,在文章标题上加一个连接,点击进入详细页.

获取模板运行结果的方法
fetch()
跳转
redirect("模块/控制器/方法"); //header()
跳转提示
success("提示内容",目标地址,等待时间);
error("提示内容",目标地址,等待时间);
生成url地址:
U("模块/控制器/方法",array('参数名'=>值)) 快捷函数
***/index.php/Home/News/datail/id/14

控制器初始化的方法 _initialize

http://localhost/psd1705/14_ThinkPHP/index.php/Home/News/lister/page/5.html
例子:实现文章列表页.
NewsController
	function lister(){
		echo "News-lister";
	}
例子:实现文章的后台添加,管理.
静态资源放在哪?
Public
例子:后台访问控制
BaseController
function _initialize(){
	if(!isset($_COOKIE['adminid'])){
            $this->error("请登录",U("Login/index"));
            exit();
        }
}

C层,控制器的编写:
XxxController.class.php
父类Controller 提供的方法:
assign()
display()
fetch()
success()
error()
redirect()
_initialize()

U("模块/控制器/方法",array('id'=>5))

V层:
TinkPHP框架的模板引擎Think
smarty模板标签:
变量标签
数组变量标签
循环遍历数组标签
条件标签
变量调节器
加载公共模板标签
常量调用标签
预定义变量调用标签

THINK模板标签:
变量标签
{$名称}
配置文件修改标签的定界符:
'TMPL_L_DELIM'=>'{',  // 模板引擎普通标签开始标记
'TMPL_R_DELIM'=>'}',  // 模板引擎普通标签结束标记
数组变量标签
{$名称.下标|['下标']}
循环遍历数组标签
<foreach name='数组名' item="v">
{$v.下标}
</foreach>
条件标签
<if condition="条件">
</if>
<if condition="条件">
<else/>
</if>
<if condition="条件">
<elseif condition="条件"/>
<elseif condition="条件"/>
....
<else/>
</if>

eq 等于
gt 大于
lt 小于
elt 小于等于
egt 大于等于
neq 不等于
heq 恒等于

例子:判断一个人的性别 1 女 2 男 3 保密

变量调节器
{被调节变量|函数名=参数1,###,参数3}
###代表被调节的变量出现的位置

加载公共模板标签

常量调用标签

预定义变量调用标签

url地址获取标签



THINK模板标签:
变量标签
{$名称}
配置文件修改标签的定界符:
'TMPL_L_DELIM'=>'{',  // 模板引擎普通标签开始标记
'TMPL_R_DELIM'=>'}',  // 模板引擎普通标签结束标记
数组变量标签
{$名称.下标|['下标']}
循环遍历数组标签
<foreach name='数组名' key='k' item="v">
{$v.下标}
</foreach>
条件标签
<if condition="条件">
</if>
<if condition="条件">
<else/>
</if>
<if condition="条件">
<elseif condition="条件"/>
<elseif condition="条件"/>
....
<else/>
</if>

eq 等于
gt 大于
lt 小于
elt 小于等于
egt 大于等于
neq 不等于
heq 恒等于

例子:判断一个人的性别 1 女 2 男 3 保密

变量调节器
{被调节变量|函数名=参数1,###,参数3}
###代表被调节的变量出现的位置

加载公共模板标签
<include file="模板path"/>
控制器名/方法名
控制器名:方法名

Public/header ---- Home/View/Public/header.html

常量调用标签
$Think.const.名称

预定义变量调用标签
$Think.get.名称
$Think.post.名称
$Think.cookie.名称
$Think.session.名称
......
url地址获取标签

http://localhost/psd1705/14_ThinkPHP/index.php/Home/News/detail/s/2

所有
域名
入口文件
模块
控制器
方法

__APP__
__MODULE__
__URL__
__ACTION__
__PUBLIC__

M层:
连接数据库
'DB_TYPE'               =>  '',     // 数据库类型
'DB_HOST'               =>  '', // 服务器地址
'DB_NAME'               =>  '',          // 数据库名
'DB_USER'               =>  '',      // 用户名
'DB_PWD'                =>  '',          // 密码
'DB_PREFIX'             =>  '',    // 数据库表前缀

测试连接是否成功:
$ob=new \Think\Model('表名');
$ob=M('表名');//实例化Model
select() 多条查询

学习Model的方法:
有一类sql语句就有一个方法
add(array)
delete()
save(array)
select()
find()
count()

data()
create()

where("条件")
field("*")
alias('t1')
join("表2 t2 on t1.字段=t2.字段")
group('字段')
having('条件')
limit('start,length')
order('字段 asc|desc')


例子:
1\获取分类数据,显示在导航上.
$type=M("ntype");
$type->select();
2\呈现文章列表,显示文章对应的分类名称.
select n.id,n.title,t.tname from news as n join ntype as t on n.type=t.id
3\获取每个分类下文章条数.
select type,count(*) as num from news group by type;
4\请查询出,文章条数大于8的文章分类
select count(*) as num,t.tname from news n join ntype t on n.type=t.id group by n.type having num>8
5\文章列表每页显示5条最新.
6\根据id,获取对应的文章记录
select * from news where id=$id
7\后台的文章添加
8\文章删除
9\文章的修改
		列表页点击修改链接
			|id=49
			index.php
			|id=49
			Admin/NewsController---Update方法
						|
		-------------------------------------
	        M 根据id获取文章记录	            V修改表单
							|
						     提交按钮
			           NewsController/usave|id=49
						|
					-------------------
					M根据id,修改文章
10\分类添加

Model的方法:
Model数据模型类,实现了数据库操作的封装.
链接
执行添加
data()
add()
修改
data()
where()
save()
删除
where()
delete()
查询
select()
find()
count()

where()
join()
group()
having()
order()
limit("$start,$length")
alias()
table()
field()

数据模型类封装
1\放在Model
2\XxxModel.class.php 类名和类文件名一样.
3\继承Model
4\使用命名空间.
5\方法名没有要求.
特点:
模板找和类同名的那个表
如果表名和类名不同名,使用属性
tableName="a"   cms_a
trueTableName="a" a
例子:封装文章分类数据模型类
1\Admin\Model\TypeModel.class.php
2\Admin\Controller\NewsController
	showTypeOption()
3\Admin\View\add.html update.html

自动验证:对表单提供数据进行验证.
指定验证规则:
protected $_validate=array(
	array(验证字段1,验证规则,错误提示,[验证条件,附加规则,验证时间]), 
);
附加规则:
regex  正则验证，定义的验证规则是一个正则表达式（默认）  

confirm  验证表单中的两个字段是否相同，定义的验证规则是一个字段名  

in  验证是否在某个范围内，定义的验证规则可以是一个数组或者逗号分割的字符串  

length  验证长度，定义的验证规则可以是一个数字（表示固定长度）或者数字范围（例如3,12 表示长度从3到12的范围）  
between  验证范围，定义的验证规则表示范围，可以使用字符串或者数组，例如1,31或者array(1,31)  
 
unique  验证是否唯一，系统会根据字段目前的值查询数据库来判断是否存在相同的值，当表单数据中包含主键字段时unique不可用于判断主键字段本身  

验证条件:
self::EXISTS_VALIDATE 或者0 存在字段就验证（默认） 
self::MUST_VALIDATE 或者1 必须验证 
self::VALUE_VALIDATE或者2 值不为空的时候验证 
验证时间:
self::MODEL_INSERT或者1新增数据时候验证 
self::MODEL_UPDATE或者2编辑数据时候验证 
self::MODEL_BOTH或者3全部情况下验证（默认） 


产生数据必须用create()
一次create(),验证所有:
protected $patchValidate = true;
geError()返回是数组

获取错误信息 getError()

自动完成:给某些字段加默认值.
 array(完成字段1,完成规则,[完成条件,附加规则]), 

例子:实现会员注册
数据库表:
create table user(
	id int key auto_increment,
	username varchar(20) unique,
	password varchar(32),
	email varchar(50),
	nick varchar(10),
	sex tinyint(1),
	addr varchar(100),
	phone varchar(11),
	addtime int
);
呈现会员注册的表单页面:
UserController
	|
	register
	|
----------------
		V


M('News')//实例化Model类
D('News')//实例化NewsModel,如果数据模型类不存在,实例化Model

公共类:

分页类 Library/Think/Page.class.php
1\实例化
$num=$ob->where(条件)->count()总记录数
$pagesize=10;
$page=new Page(总记录数,每页显示条数);
2\从表中读对应的数据 limit("$start,$pagesize")
$start=$page->firstRow;

3\获取分页的结果
$pageStr=$page->show();

$num;

num
current
prev
next




图片上传类
缩略图类
验证码类




图片上传类
Upload.class.php
实例化:
$upload=new \Think\Upload();
//设置
指定存放的目录
$upload->autoSub=false;
$upload->rootPath="./Public/";
$upload->savePath="Upload/";
指定大小
$upload->maxSize=2000000;
指定类型
$upload->mimes=array('image/png','image/jpeg','image/gif');
保存图片
$upload->upload();


缩略图类
缩略图的意义:等比例缩放
$image=new \Think\Image();
$image->open("path");
$image->thumb("width","height");
$image->save("path");

水印:
打开
$image->open();
水印
$image->water("水印图片路径");
保存
$image->save('path');

验证码类
$verify=new \Think\Verify();
$verify->check()
$verify->entry()
例子:
显示验证码,在登录表单
Home/Controller/VerifyController.class.php
	show()----Verify->entry()
缓存:
文件缓存
S()
F()
Model->cache(true|cache_name,时间)

总结优点:
实现低耦合性
规定了目录结构,M,C,V编写
文件名规定好
便于维护
缩短工期,进度快.

缺点:
效率低
不易于理解

产品添加(多图片) 管理 修改(多图片)
设计表(要存什么东西,这个东西有什么属性,受系统要展现的内容):

create table product(
	id int key auto_increment,
	title varchar(100),
	content text,
	price varchar(20)
);
create table productimage(
	id int key auto_increment,
	image varchar(50),
	productid int
);

	
后台
	添加 修改  删除(逻辑删除)

	点击添加链接
	|
	Admin/ProductController/add
				|
			-----------------
					v
					|
					提交
					|
			Admin/ProductController/save
						|
					-------------------
					M

带图片的产品列表:
为每个产品找一个图片
select p.*,i.image from product as p join productimage as i on p.id=i.productid; 不可取
有一个产品id,找一个图片

删除图片:ajax
$.ajax({
	url:'__URL__/delimage',
	data:'imagename=mingcheng&imageid=1',
	success:function(re){
		//删除节点
		
	}
})
删图片
删记录
删节点